import { Controller, Get, Query, UseGuards } from '@nestjs/common';
import { ReportsService } from './reports.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { RoleType } from '../entities';

@Controller('reports')
@UseGuards(JwtAuthGuard, RolesGuard)
@Roles(RoleType.ADMIN)
export class ReportsController {
  constructor(private readonly reportsService: ReportsService) {}

  @Get('sales')
  async getSalesReport(@Query('period') period: '7d' | '30d' | '90d' | '1y' = '30d') {
    console.log('üìä Demande de rapport des ventes pour la p√©riode:', period);
    try {
      const report = await this.reportsService.getSalesReport(period);
      console.log('‚úÖ Rapport des ventes g√©n√©r√© avec succ√®s');
      return report;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du rapport des ventes:', error);
      throw error;
    }
  }

  @Get('orders')
  async getOrdersReport(@Query('period') period: '7d' | '30d' | '90d' | '1y' = '30d') {
    console.log('üì¶ Demande de rapport des commandes pour la p√©riode:', period);
    try {
      const report = await this.reportsService.getOrdersReport(period);
      console.log('‚úÖ Rapport des commandes g√©n√©r√© avec succ√®s');
      return report;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du rapport des commandes:', error);
      throw error;
    }
  }

  @Get('products')
  async getProductsReport() {
    console.log('üè∑Ô∏è Demande de rapport des produits');
    try {
      const report = await this.reportsService.getProductsReport();
      console.log('‚úÖ Rapport des produits g√©n√©r√© avec succ√®s');
      return report;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du rapport des produits:', error);
      throw error;
    }
  }

  @Get('users')
  async getUsersReport(@Query('period') period: '7d' | '30d' | '90d' | '1y' = '30d') {
    console.log('üë• Demande de rapport des utilisateurs pour la p√©riode:', period);
    try {
      const report = await this.reportsService.getUsersReport(period);
      console.log('‚úÖ Rapport des utilisateurs g√©n√©r√© avec succ√®s');
      return report;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du rapport des utilisateurs:', error);
      throw error;
    }
  }

  @Get('complete')
  async getCompleteReport(@Query('period') period: '7d' | '30d' | '90d' | '1y' = '30d') {
    console.log('üìà Demande de rapport complet pour la p√©riode:', period);
    try {
      const report = await this.reportsService.getCompleteReport(period);
      console.log('‚úÖ Rapport complet g√©n√©r√© avec succ√®s');
      return report;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du rapport complet:', error);
      throw error;
    }
  }
} 